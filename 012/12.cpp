#include <iostream>
#include <math.h>

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Can speed up the running time if we only use primes
*/

int triDiv(int numDiv){

	int num = 0, div = 0, addTo = 1;

	while (div < numDiv){
		div = 0;
		num += addTo;
		addTo++;

		//find divisors of our number Will 
		for (int i = 1 ; i < (int)(sqrt(num)); i++){
			if (num % i == 0){
				div += 2;
			}
		}
		if((int)sqrt(num) == sqrt(num)){
			div++;
		}
	}
	return num;
}

int main(int argc, char* argv[]){

	std::cout << "The first triangle number with 500 divisors is " << triDiv(500) << "." << std::endl;

}