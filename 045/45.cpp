#include <iostream>
#include <cmath>
#include <ctime>

using namespace std;
typedef unsigned long long int uint64_t;

/*Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

Hexagonal numbers are a subset of triangle numbers so no need to check if triangle number although checking doesn't change the runtime
*/

bool isPentagonal(uint64_t i){
	double pent = (sqrt(24*i+1)+1)/6.0;
	return pent == (int)pent;
}

int main(int argc, char *argv[]){
	clock_t begin = clock();
	int i = 144;
	uint64_t hi;

	while(true){
		hi = i*(2*i-1);
		if(isPentagonal(hi)){
			break;
		}
		i++;
	}

	cout << "The triangle number that is both a pentagonal and hexagonal number after 40755 is " << hi << endl;
	clock_t end = clock();
	double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
	cout << elapsed_secs << endl; //Just wanted to see the difference in runtime from proving you found the lowest difference & just finding the first difference
}