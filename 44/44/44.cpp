#include <iostream>
#include <cmath>
#include <ctime>

using namespace std;

/*Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/

bool isPentagonal(unsigned int i){
	double pent = (sqrt(24*i+1)+1)/6.0;
	return pent == (unsigned int)pent;
}

int main(int argc, char *argv[]){
	clock_t begin = clock();
	bool dMin = false;
	int i = 1;
	unsigned int pi = 0, pj, plast, d = INT_MAX;

	while(!dMin){
		i++;
		plast = pi;
		pi = i*(3*i-1)/2;
		
		for(int j=i-1 ; j>0; j--){
			pj = j*(3*j-1)/2;
			if(isPentagonal(pi + pj) && isPentagonal(pi - pj)){
				d = pi - pj;
			}
			if(pi - pj > d){
				break;
			}
		}
		if(pi - plast > d){
			dMin = true;
		}
	}

	cout << "The minimum D is " << d << endl;
	clock_t end = clock();
	double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
	cout << elapsed_secs << endl; //Just wanted to see the difference in runtime from proving you found the lowest difference & just finding the first difference
}